// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: proto/logger.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlertLogger_HealthCheck_FullMethodName = "/AlertLogger/HealthCheck"
	AlertLogger_GetLogs_FullMethodName     = "/AlertLogger/GetLogs"
)

// AlertLoggerClient is the client API for AlertLogger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertLoggerClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetLogs(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type alertLoggerClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertLoggerClient(cc grpc.ClientConnInterface) AlertLoggerClient {
	return &alertLoggerClient{cc}
}

func (c *alertLoggerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AlertLogger_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertLoggerClient) GetLogs(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, AlertLogger_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertLoggerServer is the server API for AlertLogger service.
// All implementations must embed UnimplementedAlertLoggerServer
// for forward compatibility
type AlertLoggerServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetLogs(context.Context, *TaskRequest) (*TaskResponse, error)
	mustEmbedUnimplementedAlertLoggerServer()
}

// UnimplementedAlertLoggerServer must be embedded to have forward compatible implementations.
type UnimplementedAlertLoggerServer struct {
}

func (UnimplementedAlertLoggerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAlertLoggerServer) GetLogs(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedAlertLoggerServer) mustEmbedUnimplementedAlertLoggerServer() {}

// UnsafeAlertLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertLoggerServer will
// result in compilation errors.
type UnsafeAlertLoggerServer interface {
	mustEmbedUnimplementedAlertLoggerServer()
}

func RegisterAlertLoggerServer(s grpc.ServiceRegistrar, srv AlertLoggerServer) {
	s.RegisterService(&AlertLogger_ServiceDesc, srv)
}

func _AlertLogger_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertLoggerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertLogger_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertLoggerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertLogger_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertLoggerServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertLogger_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertLoggerServer).GetLogs(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertLogger_ServiceDesc is the grpc.ServiceDesc for AlertLogger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertLogger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AlertLogger",
	HandlerType: (*AlertLoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AlertLogger_HealthCheck_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _AlertLogger_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logger.proto",
}
